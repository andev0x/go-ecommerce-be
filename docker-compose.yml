version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: ecommerce-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Microservices
  product-service:
    build:
      context: .
      dockerfile: docker/product-service/Dockerfile
    container_name: product-service
    ports:
      - "8081:8080"
      - "50051:50051"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=ecommerce
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GRPC_PORT=50051
      - HTTP_PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  cart-service:
    build:
      context: .
      dockerfile: docker/cart-service/Dockerfile
    container_name: cart-service
    ports:
      - "8082:8080"
      - "50052:50052"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PRODUCT_SERVICE_HOST=product-service
      - PRODUCT_SERVICE_PORT=50051
      - GRPC_PORT=50052
      - HTTP_PORT=8080
    depends_on:
      redis:
        condition: service_healthy
      product-service:
        condition: service_started
    networks:
      - ecommerce-network
    restart: unless-stopped

  order-service:
    build:
      context: .
      dockerfile: docker/order-service/Dockerfile
    container_name: order-service
    ports:
      - "8083:8080"
      - "50053:50053"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=ecommerce
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=password
      - CART_SERVICE_HOST=cart-service
      - CART_SERVICE_PORT=50052
      - GRPC_PORT=50053
      - HTTP_PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      cart-service:
        condition: service_started
    networks:
      - ecommerce-network
    restart: unless-stopped

  delivery-service:
    build:
      context: .
      dockerfile: docker/delivery-service/Dockerfile
    container_name: delivery-service
    ports:
      - "8084:8080"
      - "50054:50054"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=ecommerce
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=password
      - GRPC_PORT=50054
      - HTTP_PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  notification-service:
    build:
      context: .
      dockerfile: docker/notification-service/Dockerfile
    container_name: notification-service
    ports:
      - "8085:8080"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=password
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - HTTP_PORT=8080
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - PRODUCT_SERVICE_HOST=product-service
      - PRODUCT_SERVICE_PORT=8080
      - CART_SERVICE_HOST=cart-service
      - CART_SERVICE_PORT=8080
      - ORDER_SERVICE_HOST=order-service
      - ORDER_SERVICE_PORT=8080
      - DELIVERY_SERVICE_HOST=delivery-service
      - DELIVERY_SERVICE_PORT=8080
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - HTTP_PORT=8080
    depends_on:
      - product-service
      - cart-service
      - order-service
      - delivery-service
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Development Tools
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ecommerce-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - ecommerce-network

  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ecommerce-network

  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ecommerce-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  ecommerce-network:
    driver: bridge